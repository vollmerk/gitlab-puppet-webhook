#!/usr/bin/env python
# vim: set softtabstop=2 ts=2 sw=2 expandtab: 
#
# Copyright (c) 2017 Dalhousie University
# Copyright (c) 2017 Karl Vollmer (karl.vollmer@gmail.com)
#
# This code was based on and Inspired by https://github.com/shawn-sterling/gitlab-webhook-receiver 
# Copyright (C) 2012 Shawn Sterling <shawn@systemtemplar.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License v2
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import os,subprocess,sys,stat,re
import ConfigParser
import logging,logging.handlers
import json
import daemon,daemon.pidfile
import ssl
import psutil
import smtplib
import slackweb
from email import message
from pwd import getpwnam
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer


## Define what our webserver is going to do
class puppetwebhook(BaseHTTPRequestHandler): 

  """
    log_message: disable output, everything is logged to file
  """
  def log_message(self,formate,*args):
    return

  def sendEmail(self,sender,receivers,message):
    try:
      smtpObj = smtplib.SMTP(getConfig('email','smtpserver'))
      smtpObj.sendmail(sender,receivers,message)
      log.info('sendEmail:: Send E-mail to %s from %s Body:\n%s' % (receivers,sender,message))
    except SMTPException:
      log.critical('sendEmail:: Failed to send e-mail via %s to %s from %s' % (getConfig('main','smtpserver'),receivers,sender))
      return False
    return True

  def sendSlack(self,message,channel='',username='',icon_emoji=''):

    if len(channel) == 0:
      channel = getConfig('slack','channel')
    if len(username) == 0:
      username = getConfig('slack','botname')
    if len(icon_emoji) == 0:
      icon_emoji = getConfig('slack','boticon')


    # Attempt to connect to the slack server
    try:
      slack = slackweb.Slack(url=getConfig('slack','url'))
    except:
      log.critical('sendSlack:: Unable to connect to slack with provided webhook URL, please verify custom webhook path')
      return False

    # Attempt to send our message out to the masses
    try:
      slack.notify(text=message,channel=channel,username=username,icon_emoji=icon_emoji)
    except:
      log.critical('sendSlack:: Unable to send notify to channel')
      return False
    return True

  """
    run_cmd: Runs a CLI command as a sub-proccess does our GIT commands
  """
  def run_cmd(self,cmd,detach=False):
    """ Make sure git looks in the right homedir """
    os.environ['HOME'] = os.path.expanduser('~' + getConfig('main','runas'))
    procCount = 0

    """ Get the PID of the proccess, store it in an array, if this has spawned more than 6 pids, 
        at any one time then it throws a warning, at 15 it refuses to spawn additional work """
    checkpidList = list(pidList)

    for row in range(len(checkpidList)):
      log.debug('run_cmd:: Working on %s of %s in pidList' % (row,str(len(checkpidList))))
      try:
        if psutil.pid_exists(checkpidList[row]):
          log.debug('run_cmd:: %s is still running' % (checkpidList[row]))
          procCount += 1
        else:
          log.debug('run_cmd:: %s not found, removing from running list' % (checkpidList[row]))
          try:
            pidList.pop(row)
          except:
            log.debug('run_cmd:: Unable to Remove %s element from pidList' % (row))
      except:
        log.debug('run_cmd:: Unable to do pid_exists on %s something went wrong' % (row))

    if procCount > 15:
      log.info('run_cmd:: Warning Runner has spawned 6 proccesses that are still running')
    if procCount > 20:
      log.info('run_cmd:: ERROR - More than 10 proccesses spawned by runner still exist, refusing to make it worse')
      return False


    if procCount > 15:
      log.info('run_cmd:: Warning Runner has spawned 6 proccesses that are still running')
    if procCount > 20:
      log.info('run_cmd:: ERROR - More than 10 proccesses spawned by runner still exist, refusing to make it worse')
      return False
        
    """ Run the command, and store the pid - or wait"""
    os.umask(0022)
    log.debug('run_cmd:: %s' % cmd)
    proc = subprocess.Popen(cmd.split(),stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    
    """ If we aren't detaching, then wait and respond - use this for important/fast commands """
    if detach == False:
      proc.wait()
      """ Check for non zero return code, and log error """
      if proc.returncode != 0:
        log.info('run_cmd:: Non-zero exit code:%s executing: %s' % (proc.returncode,cmd))
        log.info('run_cmd:: %s',proc.stdout.read())
        return False
      else:
        log.info('run_cmd:: %s executed sucessfully',cmd)
        log.debug('run_cmd:: %s',proc.stdout.read())
      return proc.stdout
    else:
      pidList.append(proc.pid) 
      log.debug('run_cmd:: %s launched with pid %s, not waiting' % (cmd,str(proc.pid)))
      return True

  """
    do_POST: Handles incoming post from gitlab webhook, decode json and do something about it
              for now we're just going to log it!
  """
  def do_POST(self):
    log.info('do_POST:: Received post, processing')

    """ Read in the json string """
    self.rfile._sock.settimeout(10)
    json_string = self.rfile.read(int(self.headers['Content-Length']))


    if getConfig('main','secret_token') != None:
      if getConfig('main','secret_token') != self.headers['X-Gitlab-Token']:
        log.debug('do_POST:: Secret %s does not match X-Gitlab-Token %s ignoring post' % (getConfig('main','secret_token'),self.headers['X-Gitlab-Token']))
        return False
      else:
        log.debug('do_POST:: Secret and X-Gitlab-Token match accepting post')
    else:
      log.debug('do_POST:: No secret token defined, accepting incoming post')

    log.debug('do_POST:: Received Json String %s',json_string)

    """ We're going to say we're ok regardless of what actually happens """
    message = 'OK'
    self.send_response(200)
    self.send_header('Content-type','text')
    self.send_header('Content-length',str(len(message)))
    self.end_headers()
    self.wfile.write(message)
    log.debug('do_POST:: HTTP 200 sent to gitlab, connection should be closed')

    """ Parse received json """
    rawdata = json.loads(json_string)

    """ Just to make code cleaner, move things around so that the information we want is always
        where we expect it, and give it default values if it's not available """
    data = self.normalizeData(rawdata)

    """ Look for our defined puppet project in the json """
    log.info('do_POST:: Incoming Hook detected in JSON starting processing')

    """ First we need to see if the post type is one that we should be proccessing """
    if rawdata['object_kind'] == getConfig('main','gitlab_action'):
      log.info('do_POST:: %s Allowed Hook type, continuing' % (rawdata['object_kind']))
    else:
      log.info('do_POST:: Hook is not of the expected object kind, expected %s but %s seen' % (getConfig('main','gitlab_action'),rawdata['object_kind']))
      return False

    if data['branch'] in getConfig('main','protected_environments'):
      log.info('do_POST:: %s is a protected environment, halting',data['branch'])
    else:
      """ Trigger R10k and all the other sexyness """
      log.info('do_POST:: %s is not a protected environment, syncing',data['branch'])
      self.environmentSync(data)
      self.sendTicketSystem(data)

  """ sendTicketSystem """
  """ Sends e-mail to a ticket system """
  def sendTicketSystem(self,data):
    """ Send e-mail based on method, and configured ticket system modules """
    if getConfig('email','method') == 'production' and data['branch'] != getConfig('main','production_environment'):
      log.debug('sendTicketSystem:: Branch not production not e-mailing to ticket system(s)')
      return False
    elif getConfig('email','method') == 'development' and data['branch'] == getConfig('main','production_environment'):
      log.debug('sendTicketSystem:: Branch is production, method is development not e-mailing')
      return False

    """ Do reg-exp to try to find the #[foo] in commit message """
    for commit in data['commits']:
      log.debug('sendTicketSystem:: found a commit checking for #\d+')
      for ticketnumber in re.findall('#(\d+)',commit['message']):
        log.debug('sendTicketSystem:: found %s ticket number in commit proccessing',ticketnumber)
        commands = ''
        """ Try to use the author's e-mail address """
        try:
          sender = '"'+commit['author']['name']+'" <' +commit['author']['email'] + '>'
        except:
          sender = getConfig('email','from')
        if getConfig('footprints','enabled').lower() != 'false':
          """ Footprints isn't disabled, send out an e-mail """
          log.debug('footprintsEmail:: enabled proccessing')
          self.footprintsEmail(sender,ticketnumber,commit)
        else: 
          log.debug('footprintsEmail:: disabled, not sending')
        if getConfig('otrs','enabled').lower() != 'false':
          """ OTRS isn't disabled, send out an e-mail """
          log.debug('otrsEmail:: enabled proccessing')
          self.otrsEmail(sender,ticketnumber,commit)
        else:
          log.debug('otrsEmail:: disabled not sending')
     
    return True

  """
   normalizedata:: Normalize the incoming json data
    We need the following
      branch  :: name of the branch this commit relates to
      commits :: Data for the commit messages
  """
  def normalizeData(self,rawdata):
    data = {}
      
    data['commits'] = rawdata['commits']

    if rawdata['object_kind'] == 'pipeline':
      data['branch']  = rawdata['project']['default_branch']
    elif rawdata['object_kind'] == 'push':
      try:
        data['branch']  = rawdata['ref'].split('/')[2]
      except:
        log.info('normalizeData:: Unable to determine branch, setting it to empty string')
        data['branch']  = ''
    else:
      data['branch']  = ''

    return data

  """ 
   otrsEmail:: If otrs is enabled in teh config then attempt to send an 
   agent internal-note update to the ticket in question
  """
  def otrsEmail(self,sender,ticketnumber,commit):
    log.debug('otrsEmail:: starting proccessing')
    otrsmsg = message.Message()
    otrsmsg.add_header('X-OTRS-FollowUp-SenderType','agent')
    otrsmsg.add_header('X-OTRS-FollowUp-ArticleType','note-internal')
    REfixed = re.compile('.*fix[ed]?\s*#' + ticketnumber,re.MULTILINE|re.IGNORECASE)
    if REfixed.search(commit['message']):
      log.debug('otrsEmail:: found FIX #\d+ in commit triggering close')
      otrsmsg.add_header('X-OTRS-FollowUp-State','closed successful')
    otrsmsg.set_payload(commit['message'] + "\n" + commit['url'])
    otrsmsg.add_header('subject','GITLAB-Push Update [Ticket#' + ticketnumber + ']')
    otrsmsg.add_header('from',sender)
    log.info('otrsEmail:: Sending E-mail to %s with subject %s' % (getConfig('otrs','to'),otrsmsg.as_string()))
    self.sendEmail(sender,getConfig('otrs','to'),otrsmsg.as_string())

    return True

  """
   footprintsEmail:: If footprints is enabled in the config then attempt to send
   and update e-mail to footprints based on the ticket info
  """
  def footprintsEmail(self,sender,ticketnumber,commit):
    log.debug('footprintsEmail:: starting proccessing')
    commands = ''
    try:
      time = re.compile('.*(Time=\d+[mh]{1}(\s{1}\d+[m]{1})?).*',re.IGNORECASE)
    except:
      log.debug('footprintsEmail:: Unable to compile time regexp')
      return False
    try:
      REfixed = re.compile('.*fix[ed]?\s*#' + ticketnumber,re.MULTILINE|re.IGNORECASE)
    except:
      log.debug('footprintsEmail:: Unable to compile REfixed regexp')
      return False
    """ Check for FIX right before #"""
    if REfixed.search(commit['message']):
      log.debug('footprintsEmail:: found FIX #\d+ in commit triggering close')
      commands = 'Status=' + getConfig('footprints','close_status') + "\n"
    """ See if we had some time """
    if time.search(commit['message']):
      log.debug('sendticketSystem:: found Time string as %s', time.group(1))
      commands = commands + time.group(1) + "\n"
    body = commands + "\n" + commit['message'] + "\n" + commit['url']
    subject = 'GITLAB-Push Update ISSUE=' + ticketnumber + ' PROJ=' + getConfig('footprints','project')
    message = "From: %s\nSubject: %s\n%s" % (sender,subject,body)
    log.info('footprintsEmail:: Sending E-mail to %s with subject %s'% (getConfig('footprints','to'),subject))
    self.sendEmail(sender,getConfig('footprints','to'),message)

    return True

  """
    environmentSync:: takes a project base and a SSH repo url, create directory and
     clone git repo if it doesn't exist, if it exists then just do a git pull
  """
  def environmentSync(self,data):

    """ Run R10K to re-sync the environments and modules """
    r10kcmd = '%s deploy environment --puppetfile -c %s' % (getConfig('r10k','binary'),getConfig('r10k','config'))
    try:
      os.chdir(getConfig('main','puppet_env_dir'))
      self.run_cmd(r10kcmd,detach=True)
    except:
      log.info('Unable to run r10k deploy, environments not updated')

    """ Check and see if we're in a multimaster setup and trigger ssh r10k runs if so """
    if getConfig('multimaster','enabled') == 'true':
      log.debug('environmentSync::multimaster Enabled, parsing server list')
      """ Read in the servers, and split them up """
      try:
        for server in getConfig('multimaster','servers').split(','):
          log.info('environmentSync:: Syncing puppet manifests on %s' % (server))
          """ Attempt to SSH to the server and trigger the same r10k command """
          sshr10kcmd = 'ssh %s@%s %s' % (getConfig('main','runas'),server,r10kcmd)
          try:
            self.run_cmd(sshr10kcmd,detach=True)
          except:
            log.info('environmentSync:: Error SSHing to %s for R10k sync' % server)
      except:
        log.debug('environmentSync:: Unable to read server list, skipping')

    return True


""" 
 Main:: Run it! 
"""
def runLaunch():
  """ Restart the Logger now that we've switched to the new UID """
  startLogger()
  
  server = HTTPServer(('',int(getConfig('main','http_port'))),puppetwebhook)
  """ Try to start HTTP server """
  try:
    server.socket = ssl.wrap_socket(server.socket,certfile=getConfig('main','ssl_certfile'),server_side=True)
  except: 
    log.info(':Main:: Error creating SSL socket')

  try:
    server.serve_forever()
    log.info(':Main:: Starting HTTP Server on port %s',getConfig('main','http_port'))
    """ DEBUG Log current settings """
    log.debug(':Main:: Config.environment_method [%s]',getConfig('main','environment_method'))
    log.debug(':Main:: Config.production_environment [%s]',getConfig('main','production_environment'))
    log.debug(':Main:: Config.log_file [%s]',getConfig('main','log_file'))
    log.debug(':Main:: Config.runas [%s]',getConfig('main','runas'))
  except KeyboardInterrupt,SystemExit:
    log.info(':Main:: Ctrl-C Detected, shutting down')
    server.socket.close()
    logging.shutdown()
    sys.exit(1)
  except:
    log.info(':Main:: HTTP servers shutting down')
    server.socket.close()
    logging.shutdown()
    sys.exit(0)

"""
  startLogger
    Attempt to create and start a logging handle, log is globalized so that we can pass this around
"""
def startLogger():
  global log

  """
    Init Logging, use values from config we store 7 historical copies by
    default, maybe move that into the config?
  """
  if getConfig('main','log_level') == 'DEBUG':
    log_level = logging.DEBUG
  elif getConfig('main','log_level') == 'INFO':
    log_level = logging.INFO
  else:
    log_level = logging.WARNING
  try:
    log = logging.getLogger('log')
    """ If we already have log handlers, don't re-create """
    if len(log.handlers):
      return True
    log.setLevel(log_level)
    log_handle = logging.handlers.RotatingFileHandler(getConfig('main','log_file'),maxBytes=getConfig('main','log_max_size'),backupCount=7)
    log_format = logging.Formatter("%(asctime)s %(levelname)s %(message)s","%B %d %H:%M:%S")
    log_handle.setFormatter(log_format)
    log.addHandler(log_handle)
  except IOError:
    print ':Main:: IOError opening %s verify permissions' % (getConfig('main','log_file'))
    sys.exit(1)

def getConfig(section,name):

  """ Wrapper for getConfig('section','name') because that stops the app if it errors :( """
  if not Config.has_section(section):
    log.critical(':Config:: %s section not found, your config file is invalid please verify and restart service' % (section))
    Config.add_section(section)

  if not Config.has_option(section,name):
    log.critical(':Config:: %s config option in %s section is missing, using default' % (name,section))
    Config.set(section,name,distConfig.get(section,name))

  return Config.get(section,name)

 
"""
 Launching the system, this loads the default configuration, then the localized one
 next attempt to fork off and daemonize if configured as such
"""
if __name__ == '__main__':
  global Config,distConfig
  global pidList
  """ Load the Config file ./webhook-puppet.conf """
  distConfig = ConfigParser.ConfigParser()
  Config = ConfigParser.ConfigParser()
  pidList = []
  try:
    distConfig.read(os.path.dirname(os.path.abspath(__file__)) + '/webhook-puppet.conf.dist')
  except IOError:
    print ':Main:: IOError opening %s verify permissions, no defaults loaded application may crash if running config is incorrect' % (os.path.dirname(os.path.abspath(__file__)) + '/webhook-puppet.conf.dist')

  try:
    Config.read(os.path.dirname(os.path.abspath(__file__)) + '/webhook-puppet.conf')
  except IOError:
    print ':Main:: IOError opening %s verify permissions' % (os.path.dirname(os.path.abspath(__file__)) + '/webhook-puppet.conf')
    sys.exit(1)

  """ Config and log must be global """
  startLogger()

  if getConfig('main','daemonize') != 'true':
    print ':Main:: Daemonize disabled, not forking off'
    startLogger()
    runLaunch()
      

  daemonuid = getpwnam(getConfig('main','runas')).pw_uid
  daemongid = getpwnam(getConfig('main','runas')).pw_gid
  if daemongid == 0 or daemonuid == 0:
    print 'Aborting:: service cannot run as ROOT'
    sys.exit(1)

  """ python-daemon doesn't gracefully handle the pid lock file not being writeable so check manually """
  dirStat = os.stat(os.path.dirname(os.path.abspath(__file__)))
  if ((dirStat[stat.ST_UID] != daemonuid and (dirStat[stat.ST_MODE] & stat.S_IWUSR)) or
    (dirStat[stat.ST_GID] != daemongid and (dirStat[stat.ST_MODE] & stat.S_IWGRP)) or
    (dirStat[stat.ST_MODE] & stat.S_IWOTH)):
    print ':Main:: IOError unable to write lockfile %s' % (os.path.dirname(os.path.abspath(__file__)) + '/gitlab-puppet-webhook.pid')
    sys.exit(1)

  try:
    log.debug('Starting Daemon as %s (%s:%s)' % (getConfig('main','runas'),daemonuid,daemongid))
    logging.shutdown()
    with daemon.DaemonContext(
      pidfile=daemon.pidfile.PIDLockFile(os.path.dirname(os.path.abspath(__file__)) + '/gitlab-puppet-webhook.pid'),
      uid=daemonuid,
      gid=daemongid
    ):
      runLaunch()
  except:
    print ':Main:: Unknown Error starting daemon!'
    raise
